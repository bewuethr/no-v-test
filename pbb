#!/usr/bin/env bash

set -o errexit
shopt -s extglob nullglob

declare -r \
	conf='.pbbconfig' \
	metadata='.metadata.yml' \
	header='includes/header.html' \
	favicon='includes/favicon.html' \
	fontlinks='includes/fontlinks.html' \
	goatcounter='includes/goatcounter.html' \
	cssfile='assets/pbb.css'

# Print warning message and continue
warn() {
	printf '%s\n' "$*" >&2
}

# Print error message and exit
die() {
	warn "$*"
	exit 1
}

# Print usage hint
usage() {
	cat <<- EOF >&2
		usage: pbb help | init TITLE | title TITLE | gccode CODE | build | serve | deploy

		   help    Display this message
		   init    Initialize new blog in empty Git repository
		   title   Set new blog title
		   gccode  Set GoatCounter code to enable analytics
		   build   Generate HTML files and store them in artifacts directory
		   serve   Serve blog on localhost:8000
		   deploy  Copy artifacts into master branch and push to remote
	EOF
}

# Get the language setting from the environment
getlang() {
	local lang=${LANGUAGE:-${LC_ALL:-${LC_MESSAGES:-$LANG}}}

	# Shorten and replace underscore with hyphen to get IETF tag
	lang=${lang%%[.:@]*}
	lang=${lang/_/-}

	if [[ -z $lang ]] || [[ $lang == @(C|POSIX) ]]; then
		lang='en-US'
	fi

	printf '%s' "$lang"
}

# Initialize new blog
init() {
	local blogtitle=$1

	# Source branch
	git checkout --quiet -b source \
		|| die "Could not create new branch, aborting"

	if [[ -e $conf ]]; then
		die "Conf file exists already, aborting"
	fi

	# Ignore artifacts directory
	echo 'artifacts/' > .gitignore
	git add .gitignore

	mkdir --parents assets images includes

	# Store title to config file
	setblogtitle "$blogtitle"
	git add "$conf"

	# Symlink style sheet
	ln -s /usr/local/include/pbb/pbb.css "$cssfile"
	git add "$cssfile"

	# Header links for Google Font style sheet
	printf '%s\n%s%s%s\n' \
		'<link href="https://fonts.gstatic.com" rel="preconnect" crossorigin>' \
		'<link href="https://fonts.googleapis.com/css?family=' \
		'Source+Code+Pro:400,400i,700,700i|Source+Sans+Pro:400,400i,700,700i' \
		'&display=swap" rel="stylesheet">' \
		> "$fontlinks"

	# Favicon for header
	printf '%s\n' \
		'<link rel="icon" href="/favicon.png" sizes="32x32" type="image/png">' \
		> "$favicon"

	# Template for GoatCounter snippet
	printf '%s\n' \
		'<script data-goatcounter="https://{{code}}.goatcounter.com/count"' \
		'        async src="//gc.zgo.at/count.js"></script>' \
		> "$goatcounter"

	git add includes

	# Metadata file
	printf '%s\n' 'toc: false' "toc-title: 'Table of contents'" > "$metadata"
	git add "$metadata"

	git commit -m "Initialize blog with pbb"

	# Example post
	cat <<- EOF > "$(printf '%(%F)T' -1)-my-first-post.md"
		# My first post

		Hello world!
	EOF
}

# Set a new blog title
setblogtitle() {
	local blogtitle=$1
	setconfvalue 'blogtitle' "$blogtitle"
	printf '[%s](./)\n' "$blogtitle" | pandoc > "$header"
}

# Extract the title from a markdown file
extracttitle() {
	local file=$1
	sed -n '/^# /{s///p;q}' "$file"
}

# Convert a markdown file to HTML and store it in the artifacts directory
md2html() {
	local file=$1
	[[ $file == *.md ]] || die "not a markdown file: $file"

	local args=(
		"--css=/pbb.css"
		"--from=markdown"
		"--include-before-body=$header"
		"--include-in-header=$fontlinks"
		"--metadata=lang:$(getlang)"
		"--metadata-file=.metadata.yml"
		"--output=artifacts/${file/%.md/.html}"
		"--shift-heading-level-by=-1"
		"--standalone"
		"--table-of-contents"
		"--to=html"
	)

	if [[ -f artifacts/favicon.png ]]; then
		args+=("--include-in-header=$favicon")
	fi

	if [[ -n $(getconfvalue 'goatcountercode') ]]; then
		args+=("--include-after-body=$goatcounter")
	fi

	if [[ $file == ????-??-??-* ]]; then
		args+=("--metadata=date:${file:0:10}")
	fi

	if [[ $file == 'index.md' ]]; then
		args+=("--metadata=pagetitle:$(getconfvalue 'blogtitle')")
	fi

	pandoc "${args[@]}" "$file"
}

# Empty artifacts and copy images directory
clean() {
	rm --recursive --force artifacts
	mkdir --parents artifacts
	cp --recursive images artifacts
}

# Get value from config file
getconfvalue() {
	local key=$1
	(
		# shellcheck source=/dev/null
		source "$conf"
		printf '%s' "${!key}"
	)
}

# Set value in config file
setconfvalue() {
	local key=$1
	local value=$2
	if [[ -f $conf ]]; then
		sed -i "/$key=/d" "$conf"
	fi
	printf '%s=%q\n' "$key" "$value" >> "$conf"
}

# Set the GoatCounter code
setgccode() {
	local code=$1
	setconfvalue 'goatcountercode' "$code"
	sed -E -i "s|(https://).*(\.goatcounter)|\1$code\2|" "$goatcounter"
}

# Convert favicon image file to 32x32 PNG
favicon() {
	local infile=(assets/favicon.*)
	if ((${#infile[@]} > 1)); then
		warn "found more than one favicon image in assets"
		return 1
	elif ((${#infile[@]} == 0)); then
		warn "found no favicon image in assets"
		return 1
	fi

	# Make sure to only use first frame if animated GIF
	convert "${infile[0]}[0]" -resize 32x32^ -gravity center -background none \
		-extent 32x32 artifacts/favicon.png
}

# Build all pages
build() {
	clean

	if ! favicon; then
		warn "could not find or convert favicon; skipping"
	fi

	# Build index file and convert posts
	{
		printf '%s\n\n' "# All posts"
		local f
		for f in ????-??-??-*.md; do
			printf -- '- %s &ndash; [%s](%s)\n' \
				"${f:0:10}" "$(extracttitle "$f")" "${f/%.md/.html}"
			md2html "$f"
		done | tac
	} > index.md

	# Convert index file
	md2html index.md

	rm index.md
	cp "$cssfile" artifacts
}

# Serve blog from localhost
serve() {
	if [[ ! -d artifacts ]]; then
		die "can't find artifacts directory; try \"pbb build\""
	fi

	if [[ ! -e artifacts/index.html ]]; then
		die "can't find index file; try \"pbb build\""
	fi

	(cd artifacts && python3 -m http.server)
}

# Return non-zero exit status if branch has no remote set
checkremote() {
	local branch=$1
	local remote
	remote=$(git for-each-ref --format='%(upstream:remotename)' \
		"refs/heads/$branch")

	if [[ -z $remote ]]; then
		return 1
	fi
	return 0
}

# Pull artifacts into master branch to deploy
deploy() {
	if [[ ! -d artifacts ]]; then
		die 'nothing to deploy; try "pbb build"'
	fi

	if [[ $(git symbolic-ref --quiet --short HEAD) == 'master' ]]; then
		die "already on master, check your setup"
	fi

	# Make sure master exists
	if ! git show-ref --quiet --heads master; then
		git branch master
	fi

	git checkout master
	rm --recursive --force !(@(artifacts|CNAME))
	cp --recursive artifacts/* .
	rm --recursive --force artifacts
	git add --all
	git commit --message='Publish blog'

	local args
	if ! checkremote master; then
		args=('--set-upstream' 'origin' 'master')
	fi
	git push "${args[@]}"
	git checkout -
}

if (($# < 1)); then
	usage
	exit 1
fi

subcmd=$1

case $subcmd in
	help) usage ;;

	init)
		if (($# < 2)); then
			die "usage: pbb init 'My blog title'"
		fi
		init "${*:2}"
		;;

	title)
		if (($# < 2)); then
			die "usage: pbb title 'My blog title'"
		fi
		setblogtitle "${*:2}"
		;;

	gccode)
		if (($# < 2)); then
			die "usage: pbb gccode 'mycode'"
		fi
		setgccode "$2"
		;;

	build) build ;;

	serve) serve ;;

	deploy) deploy ;;

	*)
		usage
		exit 1
		;;
esac
