#!/usr/bin/env bash

set -o errexit
shopt -s extglob

declare -r header='includes/header.html'

# Print error message and exit
die() {
	printf '%s\n' "$*" >&2
	exit 1
}

# Print usage hint
usage() {
	cat <<- EOF >&2
		usage: pbb help | init | build | deploy
		
		   help    Display this message
		   init    Initialize new blog in empty Git repository
		   build   Generate HTML files and store them in artifacts directory
		   deploy  Copy artifacts into master branch and push to remote
	EOF
}

# Initialize new blog
init() {
	# Source branch
	git checkout -b source

	if [[ -e .pbbconfig ]]; then
		die "This pbb blog seems to have been initalized already"
	fi

	# Ignore artifacts directory
	echo 'artifacts/' > .gitignore
	git add .gitignore

	local blogtitle
	read -rp "Enter blog title: " blogtitle

	# Store title to config file, single quoted with inner single quotes
	# escaped
	printf '%s\n' "blogtitle='${blogtitle//"'"/"'\''"}'" > .pbbconfig
	git add .pbbconfig

	# Header
	mkdir --parents includes images
	printf '[%s](./)\n' "$blogtitle" | pandoc > "$header"
	git add includes
	git commit -m "Initialize blog with pbb"

	cat <<- EOF > "$(date '+%F')-my-first-post.md"
		# My first post
		
		Hello world!
	EOF
}

# Extract the title from a markdown file
extracttitle() {
	local title
	local file=$1
	read -r _ title < "$file"
	printf '%s\n' "$title"
}

# Convert a markdown file to HTML and store it in the artifacts directory
md2html() {
	local file=$1
	[[ $file == *.md ]] || die "not a markdown file: $file"

	local title=$2

	local args=(
		'--from=markdown'
		'--to=html'
		"--output=artifacts/${file/%.md/.html}"
		'--standalone'
		"--metadata=pagetitle:$title"
		'--metadata=lang:en-CA'
		"--include-before-body=$header"
	)

	pandoc "${args[@]}" "$file"
}

# Empty artifacts and copy images directory
clean() {
	rm --recursive --force artifacts
	mkdir --parents artifacts
	cp --recursive images artifacts
}

# Get value from config file
getconfvalue() {
	local key=$1
	(
		# shellcheck disable=SC1091
		source .pbbconfig
		printf '%s' "${!key}"
	)
}

# Build all pages
build() {
	clean

	# Build index file and convert posts
	{
		printf '%s\n\n' "# All posts"
		local f title
		for f in ????-??-??-*.md; do
			title=$(extracttitle "$f")
			printf -- '- %s &ndash; [%s](%s)\n' \
				"${f:0:10}" "$title" "${f/%.md/.html}"
			md2html "$f" "$title"
		done | tac
	} > index.md

	# Convert index file
	md2html index.md "$(getconfvalue 'blogtitle')"

	rm index.md
}

# Pull artifacts into master branch to deploy
deploy() {
	git checkout master
	rm --recursive --force !(artifacts)
	cp --recursive artifacts/* .
	rm --recursive --force artifacts
	git add --all
	git commit --message='Publish blog'
	git push
	git checkout -
}

if (($# != 1)); then
	usage
	exit 1
fi

subcmd=$1

case $subcmd in
	help) usage ;;
	init) init ;;
	build) build ;;
	deploy) deploy ;;
	*) usage ;;
esac
